생성자(Constructor)

 : 생성자는 객체가 만들어 질 때 *자동으로 호출되는 메소드*이고, 일반적인 메소드와 몇가지 차이점이 있습니다.
   
  1. 생성자는 메소드의 반환 자료형이 없습니다. // String, char, int, double 등이 없음)
  2. 생성자는 객체가 생성될 때 자동으로 호출됩니다.
  3. 생성자의 이름은 클래스 이름과 같습니다.
  
  이러한 생성자의 사용용도는 객체의 초기화 과정 // 객체의 처음의 모습 - 예를 들면 자동차는 다 같은 자동차일지라도 이름마다 디자인이 다름 // 을 처리하기 위함입니다.
  결국 생성자는 객체가 생성될 때 한 번만 수행되는 특수한 메소드입니다. // 초기화는 한 번만 이루어진다
  
  만약 클래스를 정의할 때 생성자를 만들지 않으면 객체 생성시 자바에서 자동으로 생성자를 만들어 줍니다.(JVM에서)
  
  자동으로 만들어진 생성자 형식
  
    클래스명()  { }  //  => Default Constructor
    
     : 메소드의 매개변수와 실행 문장이 전혀 없는 형태입니다.
       이러한 생성자를 Default Constructor (디폴트 생성자) 라고 합니다.
       결국 사용자가 생성자를 만들지 않아도 자동으로 생성되는 디폴트 생성자가 있기 때문에,
       모든 클래스는 최소한 한 개 이상의 생성자를 갖고 있습니다.
       
       생성자도 메소드이기 때문에 생성자를 만드는 방법은 일반 메소드를 만드는 방법과 유사합니다.
       다만 메소드의 반환 값이 없을 뿐입니다.
       
       
  생성자의 기본 형식
  
  [public/protected/private] 클래스이름(매개변수)  //  일반 메소드와 다르게 자료형이 없음
  {
     ....;	초기화 문장	
     ....;	
  }
       
       
   . new 키워드

      : new 키워드는 객체 생성과 관련된 일을 처리 합니다.
        
        1. 객체 생성을 위해 메모리를 할당합니다.
        2. 할당된 메모리의 시작위치를 객체 참조 변수에 전달합니다.
        3. 생성자를 호출 합니다.
        
        new 키워드는 객체 생성과 관련된 모든 일을 처리합니다.
        
        ex)  MyTv  obj(객체 참조 변수)  =  new  MyTv();
        
        
 Overloading (오버로딩)
 
  : 객체 지향 프로그래밍은 다형성이라는 특징을 갖고 있습니다.
    다형성은 여러개의 클래스가 같은 메시지에 대해 각자의 방법으로 작동할 수 있도록 하는 것입니다.
    자바는 다형성을 위해 Overloading(오버로딩 : 다중 정의)과 Overriding (오버라이딩 : 재정의)을 제공합니다.
    
    재정의는 상속 관계에서 사용하는 개념입니다. 
    *클래스를 상속 받은 자식 클래스가 부모클래스와 동일한 메소드를 다시 정의 하는 것*을 재정의라 합니다.
    다중 정의는 클래스 내부에서 *같은 이름의 메소드가 2개 이상 정의 되는 것*을 말합니다.
    결국 다중 정의는 메소드 이름은 같고 매개 변수의 갯수 또는 매개 변수의 자료형이 다른 메소드를 여러 개 정의 하는 것 입니다.
    이처럼 다중 정의 된 메소드를 호출할 때 어떤 메소드를 실행 할지 구분하는 방법은 주어진 매개변수에 따라 처리 됩니다.
    
    메소드를 서로 구분하기 위해 사용하는 정보를 Signature(시그니쳐) 라고 합니다.
    자바에서 사용하는 시그니쳐는 메소드 이름, 매개변수의 갯수, 매개변수의 자료형입니다.
    이 세 가지 정보 중 하나라도 다르면 다른 메소드로 간주합니다.
    결국 오버로딩은 메소드의 시그니쳐 중 메소드의 이름만 같은 메소드를 의미합니다.
    
    
    
. Method(메소드)  //  return 하는 메소드(자료형이나 참조형)와 return 하지 않는 메소드(void)

   : 메소드는 객체가 작업할 내용을 정의해 놓은 부분입니다.
     기존 C, C++ 에서는 Function(함수) 라고 부릅니다.
     
     메소드는 Head(머리) 부분과 Body(몸통) 부분으로 구성됩니다.
     머리부분은 메소드의 반환값, 자료형, 메소드 이름, 매개변수 등으로 구성되어 있고 몸체는 중괄호 ({ }) 를 이용해 블럭으로 만듭니다.
     // 머리만 있는 메소드 => 추상메소드라고 함 //
     
     [public/protected/private][abstract/final/static/synchronized]  반환 자료형 메소드이름(매개변수,...) {
     						// 머리부분  //																									// 몸통부분(중괄호) //								
     																											변수 선언;
     																											문장1;
     																											문장2;
     																											....;
     													
     																											}
     
     . abstract			: 추상 메소드 선언에 사용 => 상속과 관련됨
     . final				: 종단 메소드 선언에 사용 => 상속과 관련
     . static				: 클래스 메소드 선언에 사용
     . synchronized	: 쓰레드의 임계 영역 지정에 사용
     
     
     . public static void main(String[] args) {
       
       }
       
       . main() 메소드는 프로그램의 시작점입니다.
         public			: 누구나 접근할 수 있음
         static			: 클래스 메소드
         void				: return 문으로 반환되는 값이 없음
         main()			: 프로그램 시작점
         String[]	 args	: 문자열배열 매개변수 args 를 갖고 있음 
         
         
         : 메소드는 특정한 작업을 수행하는 부분이고 메소드를 실행하기 위해서는 메소드를 호출(Call)합니다.
           메소드를 호출할 때 메소드에 특정한 값을 전달하는 경우가 있습니다. 이럴 때 매개 변수를 사용합니다.
           매개변수는 메소드에게 값을 전달하는 통로입니다.
         
         
         
         
         
         
         
         
         
         
         
         
         
         
     
    
    
      
    