
. 객체의 형변환
   : 모든 자료형은 형변환 할 수 있습니다. 객체도 형변환 할 수 있습니다.
     하지만 모든 객체 사이에 형변환이 가능한 것은 아니고, 상속관계에 있는 클래스 사이에만 형변환이 가능합니다.
     클래스의 계층 구조에서 슈퍼 클래스와 서브 클래스 사이에 형변환이 가능합니다.
     
     컴파일러가 자동으로 처리해 주는 확대 형변환은 작은 크기의 자료가 보다 큰 크기의 자료형으로 바뀌는 것입니다.
     객체도 바찬가지 원칙이 적용됩니다. *좁은 범위의 객체가 넓은 범위의 객체로 형변환 될 수 있습니다.*
     													// 자식이 부모 범위로 될 수 있다는 뜻
     
     부모 클래스와 자식 클래스 중에 부모가 넓은 범위 입니다.
     좁은 범위인 자식 클래스가 넓은 범위를 갖는 부모 클래스로 형변환 될 수 있습니다.
     
     
     . Abstract Class (추상 클래스) //머리만 있고, 몸은 없는 것 => 작업의 명세서를 만들기 위해서 만드는 것
     											  전체적인 틀만 가지도록 하는 것(공통된 작업이 가능하다)
       : 추상 클래스는 설계도에 비유한다면 미완성설계도라고 할 수 있습니다.
         미완성 설계도란, 완성되지 못한 설계도면을 말합니다.
         미완성 설계도로 완성제품을 만들 수 없듯이 추상 클래스도 인스턴스를 만들 수 없습니다.
         추상 클래스는 상속을 통해서 자손 클래스에 의해서만 객체를 만들 수 있습니다.
         
         Abstract Method 와 Abstract Class
         
         : 추상메소드는 직접 어떠한 명령을 수행하는 것이 아니고, 
           메소드의 머리 부분만 정의해 놓은 것을 의미합니다.
           추상 클래스는 추상 메소드를 한 개 이상 포함하고 있는 클래스를 말합니다.
           
           
            . 추상메소드 : 메소드의 머리부분만 정의해놓은 메소드
            . 추상클래스 : 추상메소드를 한 개 이상 포함하는 클래스
            
            추상 클래스를 상속받은 클래스는 추상 메소드를 재정의해서 
            더 이상 추상메소드를 갖지 않는 클래스로 바꾸고, 객체화 합니다.
            
            . 추상 클래스의 역할
               . 작업 명세표를 제공합니다.
               . 추상 클래스에 있는 추상 메소드를 반드시 구현하도록 강제합니다. //interface 는 모든 게 추상
               
               
               
           . 추상클래스와 추상메소드의 사용
           
              *형식
              
              abstract class 클래스 이름
              {
                 abstract void 추상메소드이름(); => 몸통이 없음. 객체화 되지 못 한다. 상속받은 서브클래스에서 객체화 시킴
                 ...;    
                 
              } 