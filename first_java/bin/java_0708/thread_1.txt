. thread  //대표적인 예 - main method 가 대표적인 스레드 // Thread 는 순서 잘 기억하기

 : 컴퓨터는 실행할 프로그램을 메모리에 load 시켜놓고 CPU 가 명령어를 하나씩 해석하면서 처리합니다.
   이때 하드디스크와 같은 보조 기억 장치에 저장되어 있는 프로그램을 메모리에 저장하게 됩니다.
   하드디스크에 들어있는 프로그램을 파일이라고 부르는 반면에 메모리에 적재된 프로그램을 Process(프로세스)라고 부릅니다.
   
   Thread 는 프로세스 안에서 순차적으로 작동하는 명령어의 집합입니다.
   순차적으로 실행되는 명령어들은 하나의 실로 꿸 수 있기 때문에 Thread(실) 이라고 부릅니다.
   어떤 프로그램(프로세스)에서는 여러개의 명령어가 독립적으로 실행되는 경우가 있는데 이런 경우를 다중 스레드라 합니다.
   즉 Multi-Thread(다중 스레드)는 한 개의 프로세스에서 독립적으로 처리되는 작업이 여러 개 있는 경우입니다.
   
   자바에서 스레드는 java.lang.Thread 클래스에서 상속 받아 사용합니다.
   스레드를 사용하는 경우의 대부분은 동시에 두 가지 이상의 작업을 처리할 때 입니다.
   
    . 프로세스는 특정한 작업을 처리하기 위해 메모리에 적재되어 있는 프로그램이고, 스레드는 명령어 제어 흐름입니다.
      즉, 명령어가 실행되는 순서의 흐름입니다.
      스레드는 프로세스 내부에서 독립적인 작업을 처리하는 명령어의 집합입니다.
      
      . 스레드의 사용방법
      
        : 자바는 스레드를 사용하기 위해 두 가지 방법을 제공합니다.
          첫번째는 java.lang.Thread 클래스를 상속받아 스레드를 생성하여 사용하는 방법이고, 
          두 번째는 java.lang.Runnable 인터페이스를 implements 해서 스레드를 생성하는 방법이다.
          
          . class 클래스 이름 extends Thread {  //단일 상속 받을 때
            ...;
            }
            
          . class 클래스 이름 extends 슈퍼클래스 implements Runnable {  //이미 어떤 클래스를 상속받고 있을 때(슈퍼클래스)에는 implements Runnable처럼 여러 상속을 받을 수있게 하기 위해서 사용함
          
            ...;
            }
            
            
            . Thread class 사용
            
            1. Thread 클래스를 상속 받을 클래스를 선언한다.
            
            2. Thread 클래스의 추상메소드인 run() 메소드를 재정의한다.
            
           		class ThreadTest extends Thread
                {
                    public void run()  =>  run() 메소드 재정의
                    {
                    ...;
              
                    }
               } 
               
            3. main() 메소드에서 Thread 클래스를 상속받은 클래스 객체를 생성한다.
            
            4. 생성된 객체를 이용해  start() 메소드를 호출한다.
            
               public static void main(String[] args) {
               
                  ThreadTest obj = new ThreadTest();	=> 객체 생성
                  obj.start();									 	=> start() 메소드 호출
                  
                  }
                  
                  
       Thread 에서
       
       run() 대신 start() 를 호출하는 이유
       
       . 스레드를 실행할 때 직접 run() 메소드를 호출하지 않고 start() 메소드를 호출하는 이유가 있습니다.
         프로세스나 스레드가 실행된다는 의미는 CPU 를 사용해 작업을 수행하는 것을 뜻합니다.
         그런데 한 번에 한 가지 작업만 처리하는 것이 아니고,
         동시에 2가지 이상의 작업을 처리하는 멀티 프로세싱을 위해서는 CPU 스케줄링이 필요합니다.
         운영체제는 보다 효율적으로 사용하기 위해 작업의 우선순위를 정해 처리합니다.
         결국 *CPU 의 사용권한을 정하는 것은 프로그램이 아니라 운영체제의 몫*입니다.
         start() 메소드는 스레드를 실행 가능한 상태 즉, 스레드가 CPU 를 사용할 수 있도록 준비 상태를 만드는 역할을 합니다.
         그리고 CPU 스케쥴러에 의해 run() 메소드를 호출해 실제 CPU 를 사용하는 상태로 바뀝니다.                 
         
         갈비지콜렉터 = 데몬스레드
         
         
     
     . 스레드 우선순위 지정
       : 멀티 스레드는 여러 개의 스레드가 동시에 실행된다고 하였지만 이것은 일반적인 설명이고 실제로는 그렇지 않습니다.
         대부분의 컴퓨터는 한 개의 CPU 만 가지고 있습니다.
         그렇기 때문에 실제로 여러 스레드 중에서 하나의 스레드만 수행합니다.
         스레드가 작동하는 방식은 하나의 스레드가 종료할 때 까지 CPU 를 독점하는 것이 아니고 여러 개의 스레드를 번갈아가며 처리합니다.
         이처럼 여러 개의 스레드를 교차하면서 처리하는 것을 Scheduling(스케줄링) 이라고 합니다.
         여러 개의 스레드 중에서 어떤 스레드가 CPU 를 사용할지는 스레드 스케쥴러가 결정해 처리합니다.
         따라서 자바스레드의 정확한 작동을 예측하기는 힘듭니다.
         하지만 setPriority() 메소드를 이용해 우선순위를 부여할 수 있습니다.
         
         자바는 총 10단계 우선순위를 갖습니다. 그중에서 3가지 우선순위는 Thread 클래스의 멤버 상수로 정의되어 있습니다.
         
         
         static int MAX_PRIORITY : 스레드가 가지는 최고 우선순위 값  //10
         static int MIN_PRIORITY : 스레드가 가지는 최소 우선순위 값  //1
         static int NORM_PRIORITY : 스레드가 가지는 보통 우선순위 값  //5
         
         
         
         
         . Runnable 인터페이스 사용
         
           : 이미 다른 클래스를 상속받고 있어서 Thread 를 사용할 수 없을 때 Runnable 인터페이스를 이용합니다.
           
           
             * Runnable 사용 방법 *
              
          1. Runnable 인터페이스를 implements 하는 클래스를 정의한다.
          
          2. Runnable 인터페이스의 run() 메소드를 재정의한다.
            
              class RunnableTest implements Runnable //Runnable 인터페이스 구현, 추상이니까
              {
                 public void run() //run() 메소드 재정의 , 몸통 만들어 줌
                 {
                   ...;
                 }      
              }
              
          3. main() 메소드에서 Runnable 인터페이스를 구현한 클래스 객체를 생성
          
          4. Thread 클래스 객체를 생성하면서 생성자에 '3.' 에서 생성한 객체를 매개변수로 전달
          
          5. '4.' 에서 생성한 객체를 사용해 start() 메소드 호출
          
              public static void main(String[] args)
              {
                 RunnableTest obj = new RunnableTest(); // 객체 생성
                 
                 Thread thread = new Thread(obj); // Thread  클래스 객체 생성
                 
                 thread.start();  //start() 메소드 호출
              }
              
              
              
        
        
        . Synchronization(동기화)
        
          : 지금까지의 스레드는 각기 독립적으로 작동했습니다.
            이런 경우에 여러개의 스레드가 동시에 공유된 하나의 값에 점근 한다면 문제가 생길 수 있습니다.
            
            예를 들어 ATM(은행 자동화기기)을 사용할 경우에 ATM 을 사용할 수 있는 카드를 여러 장 발급할 수 있습니다.
            만약 세 사람이 각자 같은 계좌를 이용할 수 있는 ATM카드를 가지고 있다면 그 세 사람이 동시에 서로 다른 ATM 을 이용하여
            입출금을 시도할 수 있습니다. 이럴 경우에 발생하는 문제를 해결하는 방법을 제공합니다.
            
            여러 개의 은행카드는 하나의 계좌에 입출금을 할 수 있습니다.
            이런 경우 동시에 공유된 값에 접근할 수 있는 스레드는 하나로 제한할 필요가 있습니다.
            이런 작업을 처리하기 위해 자바에서는 동기화 기법이 존재합니다.
            즉, Synchronization 는 한 시점에 하나의 스레드만 공유된 값을 변경시킬 수 있습니다.
            
            이때 스레드에 의해 공유된 값을 임계영역(Critical Section) 이라 하고,
            임계영역 지정은 synchronized 키워드를 이용해 처리합니다.
            하나의 스레드가 임계영역으로 지정된 변수나 메소드를 호출할 때,
            다른 스레드가 그 값에 접근할 수 없도록 Lock(락)을 걸고 사용이 끝나면 락을 해제합니다.
            
            
            
            동기화 처리 방법
            
            1. 공유 데이터에 접근하는 메소드를 synchronized 키워드로 처리합니다.
                
                
                synchronized 메소드() {
                
                ...; //공유 데이터 접근
                }
                
            2. 공유데이터에 접근되는 영역을 synchronized 키워드로 블록화처리합니다.
            이때 공유 자원을 가지고 있는 클래스 객체를 사용합니다.
            
            synchronized(클래스 객체) {
            
               ...; //처리할 블럭
               
               }
               
             
             