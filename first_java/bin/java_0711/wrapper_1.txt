
  Wrapper 클래스
  
    : 자바의 8가지 기본 자료형은 단순히 값을 저장하는 기능만 있지만 Wrapper 클래스로 다양한 기능을 사용할 수 있습니다.
      
      자바의 기본 자료형은 객체 지향 프로그램에서 사용되는 객체와는 다른 차원의 개념입니다.
      객체는 속성과 행위를 포함하고 있지만, 기본 자료형은 속성만 표현하기 때문에 처리하는데 한계가 있습니다.
      단지 연산자를 이용한 연산만 수행할 수 있습니다.
      이런 제한을 보강하기 위해 만들어진 것이 Wrapper 클래스입니다.
      Wrapper 클래스를 사용하면 자료형을 여러가지 형태로 처리할 수 있습니다.
      소문자를 대문자로 변환, 정수를 문자열로 변환, 문자열을 정수로 변환 등과 같은 
      부가적인 처리를 할 수 있어서 Wrapper 클래스를 Data Type Wrapper 라고 부릅니다.
      
      자바의 Primitive Type(기본형) 변수도 때로는 객체로 다루어져야 하는 경우도 있습니다.
      예를 들면 매개 변수로 객체를 요구할 때 등 기본형이 아닌 객체로 저장해야 할 때 객체간의 비교가 필요할 때
      등의 경우에 기본 값들을 객체로 변환해서 작업을 수행해야 합니다.
      이때 사용되는 것이 Wrapper 클래스입니다.
      기본 자료형은 단순히 값을 저장하는 기능만 있지만 Wrapper 클래스는 객체이므로 다양한 기능을 사용할 수 있습니다.
      
      
      
        종류
        
     기본 자료형				Wrapper 클래스 //Wrapper 는 Wrap 으로 감싼다는 그런 뜻임 클래스로 들어가는 게 boxing 클래스에서 나오는게 unboxing
      (key 값이니 소문자) 	(class 니까 소문자)
      boolean						Boolean
      byte							Byte
      char							*Character*  //Wrapper 클래스에 대한 문제로 char 와 int 를 자주 출제함
      double						Double
      float							Float
      int								*Integer*
      short							Short
      long							Long
      void							Void //void 는 기본타입은 아니지만 기본타입으로 씀
      
      
      그렇다면 도대체 언제 오토박싱과 언박싱을 사용해야 할까요?
      레퍼런스 타입과 기본 타입 사이의 "임피던스 불일치"가 있는 경우에만 사용하세요.(즉, 기본타입을 쓸 수 없는 경우에만 쓰기)
      예를 들어 Map 이나 Set 같은 Jaca Collection 에는 기본 타입을 못 넣기 때문에 이런 경우에는 레퍼런스 타입을 쓰면 됩니다.
      하지만 과학 계산이나, 성능에 민감한 계산 코드에 오토박싱/언박싱을 사용하는 건 적절하지 않습니다.
      Integer 는 int 를 완벽하게 대체할 수 없습니다.
      오토박싱과 언박싱은 기본 타입과 레퍼런스 타입 사이의 구분을 흐릿하게 만들어주지만,
      그 차이를 완벽하게 없애는 것은 아닙니다.
      
      