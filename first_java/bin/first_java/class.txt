. 객체 지향  프로그래밍

  : 프로그램 작성의 거의 대부분은 사람이 직접 구상해서 하나하나 코딩하는 수작업으로 진행합니다.
    그렇기 때문에 프로그램을 개발하는데 많은 시간이 소요되고 결과적으로 생산성이 떨어질 수 밖에 없습니다.
    사회의 발전 속도에 비해 프로그램의 개발 속도가 느리게 진행되기 때문에 소프트웨어의 위기 상황이 오게 되었습니다.
    이러한 문제를 해결하기 위해 Structured Programming(구조적 프로그래밍) 이 나오게 되었습니다.
    이 방법은 순차, 선택, 반복 이라는 3가지 제어 구조를 이용해서 프로그램을 작성하고 프로그램을 기능별로 분할시키는 방법입니다.
    하지만 1990년대 들어와 구조적 프로그램의 기법에 한계가 왔고 이로 인해서 또다시 포스트웨어의 위기가 찾아 왔습니다.
    이때 등장한 것이 객체 지향 프로그램입니다.
    객체 지향 프로그램은 데이터와 명령어를 객체로 표현하고, 이 객체를 재사용해 소프트웨어 개발의 생산성을 높일 수 있습니다.
    
    
   객체 지향 언어의 특징
    : 1. 코드의 
    
    재사용성이 높다 : 새로운 코드를 작성할 때 기존의 코드를 이용하여 쉽게 작성할 수 있다.
    
      2. 코드의 관리가 용이하다 : 코드간의 관계를 이용해서 적은 노력으로 쉽게 코드를 변경시킬 수 있다.ㅣ
      
       3. 신뢰성이 높은 프로그램을 가능하게 한다 ': 제이자와 메소드를 이용하여 데이터를 보호하고 올바른 값을 유지하도록 하며, 코드의 중복을 배제하고 보드의 불일치로 인한 오동작을 방지할 수 있다.   
       
       
    절차 지향 프로그래밍
     : 1. 절차 지향 프로그램 언어는 기준이 CBOL, FORTRAN, +PASCAL, C 등이 있습니다. 
     절차 지향 프로그래밍은 Function(함수) Procedure(프로시져) 를 중심으로 프로그램을 작성하기 때문에 구조적 프로그램 방식이라고도 합니다.
     대량의 데이터를 순차적으로 처리하기에 적합합니다.
     하지만 구조가 큰 규모의 프로그램을 작성할 때 개발 및 유지 보수가 어려운 점이 있습니다.
     
     . 프로그램의 재사용이 쉽지 않습니다.
     . 큰 규모의 프로그램을 작성할 때 오류 발생이 많습니다.
     . 프로그램의 조건, 선택, 반복의 구조로 되어 있기 대문에 유지 보수가 어렵습니다.
     . 현실 세계와 동떨어진 프로그래머 위주의 프로그램이 될 수 있습니다.
    
    
    => 이러한 특징들 때문에 절차 지향 프로그램은 C언어만 남고, 대부분은 객체 지향 언어로 나온다.
    
    
    . 모듈화( => java 는 처음부터 끝까지 모듈이다. class로 이루어져 있다.)
    
      : 프로그램을 작성할 때 Module 처리를 사용합니다.
        모듈이란 독자적인 기능을 가진 부분을 의미합니다.
        모듈화의 가장 큰 이유는 프로그램의 재사용성을 높이기 위함입니다.
        특별한 기능을 수행하는 부분을 독립적으로 처리하면 나중에 그 부분을 떼어 내어 다시 사용할 수 있습니다.
        두번째 프로그램의 작성을 보다 쉽게 하기 위해서 입니다.
        프로그램을 기능별로 구조화 하면 여러 사람이 분할 작성할 수 있고 각 모듈의 구조를 알지 못 해도 사용 방법만 알면 되기 때문에 쉽게 프로그램을 작성할 수 있습니다.
        
        
        
        
      Object Oriented Programming(OOP) : 객체 지향 프로그래밍(OOP 에서는 '객체의 집합이 프로그램이다' 라고 함)
      
      
       : OOP 에 대한 정의는 사람마다 약간씩 다릅니다.
         
         Object(객체), Class(클래스), Inheritance(상속), 의 개념을 적용해서 작성하는 프로그래밍 방법
         
         프로그램을 작성하는 방법에 따라 프로그램의 정의도 달라집니다.
         
         전통적인 절차 지향 프로그래밍의 입장에서는 명령어를 논리적으로 모아 놓은 것을 프로그램이라고 정의하고,
         객체 지향 프로그래밍 방법에서는 객체의 집합을 프로그램이라고 합니다.
         
         
         
         
         
         . 객체와 클래스(개념, 사상, 형광등 등 보이든 보이지 않는 것이든 전부 객체라고 함 그것들을 소프트웨어적으로 만든 것이 클래스임)
           
           : 자동차를 예를 들어 바퀴는 몇 개이고, 최대 속력은 시속 몇 km 이고 탑승 인원은 몇 명인지 색깔은 무엇인지 등에 의해 자동차가 구별 됩니다.
             이처럼 속성(자동차의 색깔, 바퀴의 수, 문의 수 등)과 행위(자동차가 달린다, 멈춘다, 박는다 등)하는 두 가지 특징에 의해 자동차는 설명할 수 있습니다.
             이와같은  속성과 행위를 프로그램에서 처리하기 위해서 변수와 메소드를 사용합니다. 즉 속성은 변수로 행위는 메소드로 처리합니다. 
             이렇게 사물을 변수와 메소드로 만들어 놓은 것을 Class(클래스) 라고 합니다.(클래스의 멤버는 변수와 메소드가 된다 그 외에는 없음)
             
             . 변수 : 사물의 속성이나 상태 정보 표현
             . 메소드 : 사물의 행위를 표현
             
             
         
   클래스는 사물의 특성을 소프트웨어적으로 Modeling(모델링) 하는 것이다.
   
   즉, 클래스는 어떤 사물의 속성과 행위를 각각 변수와 메소드를 사용해서 정의하고 있는 소프트웨어적인 설계도(Blueprint) 또는 Prototype(프로토타입) 입니다.
   이와 같은 클래스를 만들기 위해서 실세계에 존재하는 사물을 소프트웨어적으로 추상화(Abstraction) 해야 합니다.(추상화 - 실제 객체가 아닌 문자화 등을 통해서 프로그램으로 들어오는 것)
   
   
   
   
   자바의 메모리 구조
   
    . 자바는 메소드, 변수등을 저장하기 위한 3가지 메모리 공간을 가집니다.
    
    . Method Area(= Class Area) : 메소드에 대한 바이트 코드 또는 클래스의 전역변수인 클래스변수(static) 등을 할당하는 메모리 영역(Class가 살아있는 한 끝까지 유지되는 Area)
    
    . Stack Area : 메소드가 실행 될 때 사용되는 매개 변수, 메소드 내에 선언된 지역변수, 임시 변수등이 저장되는 영역메소드 실행이 종료되면 자동으로 시스템에 반환됨.
        			  (Method가 사라지면 자동으로 사라짐)
    
    . Heap Area : 객체를 사용할 때 사용되는 메모리 공간 Heap 메모리를 사용하기 위해 new 키워드를 사용합니다.(동적 메모리 - garbage 콜렉터가 어쩌고)
    
    
    
    
    
    
   . 클래스의 속성과 행위를 실제로 만들어 놓은 것을 객체라고 합니다.
     객체는 실세계에 존재하는 사물. 그 자체를 의미합니다.
     결국, 사물을 소프트웨어적으로 추상화 시켜 놓은 것을 클래스라고 하고, 
     클래스를 실제 사용할 수 있도록 만든 것 또는 클래스가 실재 값을 가질 수 있도록 메모리 공간에 할당해 놓은 것을 Instance(인스턴스) 또는 객체라고 합니다.
    
    
    
   . 사물의 추상화해서 모델링한 것, 또는 객체를 만들 수 있는 틀(Template) 을 클래스라고 하고, 이 틀을 사용해 실제로 메모리에 구현한 것을 객체라고 부릅니다.
   
     붕어빵을 비교하면 붕어빵을 만드는 기계는 클래스이고, 만들어진 붕어빵은 객체 또는 인스턴스입니다.
     
     자바에서 클래스는 객체의 개념을 담고 있는 최소 단위로 변수와 메소드의 집합으로 되어있습니다.
     이러한 객체를 사용하기 위해 new  명령어를 사용하여 메모리(Heap 공간 - 동적메모리 할당공간)에 객체를 생성합니다. 
     
     
     객체지향 프로그램의 특징
     
      . Inheritance(상속성)     : 상속은 중요한 개념입니다. 이미 만들어진 소스를 이용해 새로운 코드를 생성하거나, 특별한 부분에 대해서는 재정의 해서 사용하는 것이 상속입니다.
      								      결국 프로그램의 개발 속도를 개선할 수 있고, 프로그램의 특정한 부분에 오류가 있을 때, 한 부분의 수정만으로 프로그램 전체의 오류를 방지할 수 있는 장점이 있습니다.
     
      . Polymorphism(다형성) : 상속 받은 것을 그대로 사용하지 않고 사용자의 입맛에 맞게 바꾸어 사용할 수 있도록 하는 것이 다형성입니다.
      									  상속해준 클래스에 있는 메소드를 적절하게 변형할 수 있습니다. 이러한 다형성을 이용하면 프로그램을 보다 쉽게 작성할 수 있습니다.
      									  
      									  다형성의 종류 : Over-loading, Over-riding 두 가지.
      
      . Encapsulation(캡슐화) : 캡슐화는 두 가지 측면, 즉, 데이터의 보호와 재 사용성의 증대라는 장점을 가집니다. 캡슐화 된 데이터는 외부 세계와 단절이 되기 때문에 데이터를 보호할 수 있고,
      			          (= 은닉화)  외부 세계와 단절이 되기 위해서는 일정한 독립성이 필요합니다. 그로 인해 캡슐화 된 부분만 떼어내어 재사용할 수 있습니다.
      									  이와 같은 개념을 Data Hiding(데이터 은닉) 이라고 부릅니다.
      									  멤버 변수는 (private), 멤버 메소드는 (public) 으로 선언하면 은닉화가 된다. 그렇게 하면? 직접 변수에 접근하지 못 하고, 메소드를 통해서만 접근할 수 있다.
      			
      			=> 이러한 세 가지 개념을 따로따로 떼어 놓고 생각할 수 없습니다.
      			     상속이 이루어져야 다형성을 이용할 수 있고, 상속성을 사용하기 위해서는 데이터가 믿을만해야 하는데 이를 위해 캡슐화가 필요합니다.
      			     그리고 완벽한 캡슐화를 이루기 위해서는 상속성과 다형성이 뒷받침되어야 합니다.
      			     
      			     
      			     
      		. 클래스의 구조

				 : 자바는 클래스를 기본 단위로 구성되어 있습니다.
				   클래스는 객체를 생성하는 틀(Template) 이라고 말할 수 있습니다.
				   
				   
				   
				   클래스 구성요소(생성자는 메소드의 일종이므로 사실상 두 가지다)
				   
				   . 멤버 변수 : 클래스의 속성을 정의 합니다.
				   . 생성자 : 객체 객체 초기화를 담당합니다.
				   . 메소드 : 클래스의 데이터를 조작합니다.(행위를 표시)
      			     